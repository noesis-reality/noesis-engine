// automatically generated by the FlatBuffers compiler, do not modify

package noesis.protocol

import com.google.flatbuffers.kotlin.*
import kotlin.jvm.JvmInline
@Suppress("unused")
class NoesisMessage : Table() {

    fun init(i: Int, buffer: ReadWriteBuffer) : NoesisMessage = reset(i, buffer)

    val messageType : noesis.protocol.MessageType get() = lookupField(4, noesis.protocol.MessageType(0) ) { noesis.protocol.MessageType(bb.get(it + bufferPos)) }

    val timestampMs : ULong get() = lookupField(6, 0UL ) { bb.getULong(it + bufferPos) }

    val inferenceRequest : noesis.protocol.InferenceRequest? get() = inferenceRequest(noesis.protocol.InferenceRequest())
    fun inferenceRequest(obj: noesis.protocol.InferenceRequest) : noesis.protocol.InferenceRequest? = lookupField(8, null ) { obj.init(indirect(it + bufferPos), bb) }

    val inferenceResponse : noesis.protocol.InferenceResponse? get() = inferenceResponse(noesis.protocol.InferenceResponse())
    fun inferenceResponse(obj: noesis.protocol.InferenceResponse) : noesis.protocol.InferenceResponse? = lookupField(10, null ) { obj.init(indirect(it + bufferPos), bb) }

    val tokenStream : noesis.protocol.TokenStream? get() = tokenStream(noesis.protocol.TokenStream())
    fun tokenStream(obj: noesis.protocol.TokenStream) : noesis.protocol.TokenStream? = lookupField(12, null ) { obj.init(indirect(it + bufferPos), bb) }

    val reasoningStream : noesis.protocol.ReasoningStream? get() = reasoningStream(noesis.protocol.ReasoningStream())
    fun reasoningStream(obj: noesis.protocol.ReasoningStream) : noesis.protocol.ReasoningStream? = lookupField(14, null ) { obj.init(indirect(it + bufferPos), bb) }

    val errorResponse : noesis.protocol.ErrorResponse? get() = errorResponse(noesis.protocol.ErrorResponse())
    fun errorResponse(obj: noesis.protocol.ErrorResponse) : noesis.protocol.ErrorResponse? = lookupField(16, null ) { obj.init(indirect(it + bufferPos), bb) }

    val controlMessage : noesis.protocol.ControlMessage? get() = controlMessage(noesis.protocol.ControlMessage())
    fun controlMessage(obj: noesis.protocol.ControlMessage) : noesis.protocol.ControlMessage? = lookupField(18, null ) { obj.init(indirect(it + bufferPos), bb) }

    companion object {
        fun validateVersion() = VERSION_2_0_8

        fun asRoot(buffer: ReadWriteBuffer) : NoesisMessage = asRoot(buffer, NoesisMessage())
        fun asRoot(buffer: ReadWriteBuffer, obj: NoesisMessage) : NoesisMessage = obj.init(buffer.getInt(buffer.limit) + buffer.limit, buffer)


        fun createNoesisMessage(builder: FlatBufferBuilder, messageType: noesis.protocol.MessageType, timestampMs: ULong, inferenceRequestOffset: Offset<noesis.protocol.InferenceRequest>, inferenceResponseOffset: Offset<noesis.protocol.InferenceResponse>, tokenStreamOffset: Offset<noesis.protocol.TokenStream>, reasoningStreamOffset: Offset<noesis.protocol.ReasoningStream>, errorResponseOffset: Offset<noesis.protocol.ErrorResponse>, controlMessageOffset: Offset<noesis.protocol.ControlMessage>) : Offset<NoesisMessage> {
            builder.startTable(8)
            addTimestampMs(builder, timestampMs)
            addControlMessage(builder, controlMessageOffset)
            addErrorResponse(builder, errorResponseOffset)
            addReasoningStream(builder, reasoningStreamOffset)
            addTokenStream(builder, tokenStreamOffset)
            addInferenceResponse(builder, inferenceResponseOffset)
            addInferenceRequest(builder, inferenceRequestOffset)
            addMessageType(builder, messageType)
            return endNoesisMessage(builder)
        }
        fun startNoesisMessage(builder: FlatBufferBuilder) = builder.startTable(8)

        fun addMessageType(builder: FlatBufferBuilder, messageType: noesis.protocol.MessageType) = builder.add(0, messageType.value, 0)

        fun addTimestampMs(builder: FlatBufferBuilder, timestampMs: ULong) = builder.add(1, timestampMs, 0UL)

        fun addInferenceRequest(builder: FlatBufferBuilder, inferenceRequest: Offset<noesis.protocol.InferenceRequest>) = builder.add(2, inferenceRequest, 0)

        fun addInferenceResponse(builder: FlatBufferBuilder, inferenceResponse: Offset<noesis.protocol.InferenceResponse>) = builder.add(3, inferenceResponse, 0)

        fun addTokenStream(builder: FlatBufferBuilder, tokenStream: Offset<noesis.protocol.TokenStream>) = builder.add(4, tokenStream, 0)

        fun addReasoningStream(builder: FlatBufferBuilder, reasoningStream: Offset<noesis.protocol.ReasoningStream>) = builder.add(5, reasoningStream, 0)

        fun addErrorResponse(builder: FlatBufferBuilder, errorResponse: Offset<noesis.protocol.ErrorResponse>) = builder.add(6, errorResponse, 0)

        fun addControlMessage(builder: FlatBufferBuilder, controlMessage: Offset<noesis.protocol.ControlMessage>) = builder.add(7, controlMessage, 0)

        fun endNoesisMessage(builder: FlatBufferBuilder) : Offset<NoesisMessage> {
            val o: Offset<NoesisMessage> = builder.endTable()
            return o
        }

        fun finishNoesisMessageBuffer(builder: FlatBufferBuilder, offset: Offset<NoesisMessage>) = builder.finish(offset)

        fun finishSizePrefixedNoesisMessageBuffer(builder: FlatBufferBuilder, offset: Offset<NoesisMessage>) = builder.finishSizePrefixed(offset)
    }
}

typealias NoesisMessageOffsetArray = OffsetArray<NoesisMessage>

inline fun NoesisMessageOffsetArray(size: Int, crossinline call: (Int) -> Offset<NoesisMessage>): NoesisMessageOffsetArray =
    NoesisMessageOffsetArray(IntArray(size) { call(it).value })
