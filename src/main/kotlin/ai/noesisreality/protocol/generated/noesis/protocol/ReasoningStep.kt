// automatically generated by the FlatBuffers compiler, do not modify

package noesis.protocol

import com.google.flatbuffers.kotlin.*
import kotlin.jvm.JvmInline
@Suppress("unused")
class ReasoningStep : Table() {

    fun init(i: Int, buffer: ReadWriteBuffer) : ReasoningStep = reset(i, buffer)

    val stepNumber : UInt get() = lookupField(4, 0u ) { bb.getUInt(it + bufferPos) }

    val thought : String? get() = lookupField(6, null ) { string(it + bufferPos) }
    fun thoughtAsBuffer() : ReadBuffer = vectorAsBuffer(bb, 6, 1)

    val analysis : String? get() = lookupField(8, null ) { string(it + bufferPos) }
    fun analysisAsBuffer() : ReadBuffer = vectorAsBuffer(bb, 8, 1)

    val conclusion : String? get() = lookupField(10, null ) { string(it + bufferPos) }
    fun conclusionAsBuffer() : ReadBuffer = vectorAsBuffer(bb, 10, 1)

    val confidence : Float get() = lookupField(12, 0.0f ) { bb.getFloat(it + bufferPos) }

    val timestampMs : ULong get() = lookupField(14, 0UL ) { bb.getULong(it + bufferPos) }

    companion object {
        fun validateVersion() = VERSION_2_0_8

        fun asRoot(buffer: ReadWriteBuffer) : ReasoningStep = asRoot(buffer, ReasoningStep())
        fun asRoot(buffer: ReadWriteBuffer, obj: ReasoningStep) : ReasoningStep = obj.init(buffer.getInt(buffer.limit) + buffer.limit, buffer)


        fun createReasoningStep(builder: FlatBufferBuilder, stepNumber: UInt, thoughtOffset: Offset<String>, analysisOffset: Offset<String>, conclusionOffset: Offset<String>, confidence: Float, timestampMs: ULong) : Offset<ReasoningStep> {
            builder.startTable(6)
            addTimestampMs(builder, timestampMs)
            addConfidence(builder, confidence)
            addConclusion(builder, conclusionOffset)
            addAnalysis(builder, analysisOffset)
            addThought(builder, thoughtOffset)
            addStepNumber(builder, stepNumber)
            return endReasoningStep(builder)
        }
        fun startReasoningStep(builder: FlatBufferBuilder) = builder.startTable(6)

        fun addStepNumber(builder: FlatBufferBuilder, stepNumber: UInt) = builder.add(0, stepNumber, 0u)

        fun addThought(builder: FlatBufferBuilder, thought: Offset<String>) = builder.add(1, thought, 0)

        fun addAnalysis(builder: FlatBufferBuilder, analysis: Offset<String>) = builder.add(2, analysis, 0)

        fun addConclusion(builder: FlatBufferBuilder, conclusion: Offset<String>) = builder.add(3, conclusion, 0)

        fun addConfidence(builder: FlatBufferBuilder, confidence: Float) = builder.add(4, confidence, 0.0f)

        fun addTimestampMs(builder: FlatBufferBuilder, timestampMs: ULong) = builder.add(5, timestampMs, 0UL)

        fun endReasoningStep(builder: FlatBufferBuilder) : Offset<ReasoningStep> {
            val o: Offset<ReasoningStep> = builder.endTable()
            return o
        }
    }
}

typealias ReasoningStepOffsetArray = OffsetArray<ReasoningStep>

inline fun ReasoningStepOffsetArray(size: Int, crossinline call: (Int) -> Offset<ReasoningStep>): ReasoningStepOffsetArray =
    ReasoningStepOffsetArray(IntArray(size) { call(it).value })
