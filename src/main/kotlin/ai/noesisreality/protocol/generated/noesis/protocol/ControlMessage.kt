// automatically generated by the FlatBuffers compiler, do not modify

package noesis.protocol

import com.google.flatbuffers.kotlin.*
import kotlin.jvm.JvmInline
@Suppress("unused")
class ControlMessage : Table() {

    fun init(i: Int, buffer: ReadWriteBuffer) : ControlMessage = reset(i, buffer)

    val id : String? get() = lookupField(4, null ) { string(it + bufferPos) }
    fun idAsBuffer() : ReadBuffer = vectorAsBuffer(bb, 4, 1)

    val command : String? get() = lookupField(6, null ) { string(it + bufferPos) }
    fun commandAsBuffer() : ReadBuffer = vectorAsBuffer(bb, 6, 1)

    val parameters : String? get() = lookupField(8, null ) { string(it + bufferPos) }
    fun parametersAsBuffer() : ReadBuffer = vectorAsBuffer(bb, 8, 1)

    companion object {
        fun validateVersion() = VERSION_2_0_8

        fun asRoot(buffer: ReadWriteBuffer) : ControlMessage = asRoot(buffer, ControlMessage())
        fun asRoot(buffer: ReadWriteBuffer, obj: ControlMessage) : ControlMessage = obj.init(buffer.getInt(buffer.limit) + buffer.limit, buffer)


        fun createControlMessage(builder: FlatBufferBuilder, idOffset: Offset<String>, commandOffset: Offset<String>, parametersOffset: Offset<String>) : Offset<ControlMessage> {
            builder.startTable(3)
            addParameters(builder, parametersOffset)
            addCommand(builder, commandOffset)
            addId(builder, idOffset)
            return endControlMessage(builder)
        }
        fun startControlMessage(builder: FlatBufferBuilder) = builder.startTable(3)

        fun addId(builder: FlatBufferBuilder, id: Offset<String>) = builder.add(0, id, 0)

        fun addCommand(builder: FlatBufferBuilder, command: Offset<String>) = builder.add(1, command, 0)

        fun addParameters(builder: FlatBufferBuilder, parameters: Offset<String>) = builder.add(2, parameters, 0)

        fun endControlMessage(builder: FlatBufferBuilder) : Offset<ControlMessage> {
            val o: Offset<ControlMessage> = builder.endTable()
            return o
        }
    }
}

typealias ControlMessageOffsetArray = OffsetArray<ControlMessage>

inline fun ControlMessageOffsetArray(size: Int, crossinline call: (Int) -> Offset<ControlMessage>): ControlMessageOffsetArray =
    ControlMessageOffsetArray(IntArray(size) { call(it).value })
