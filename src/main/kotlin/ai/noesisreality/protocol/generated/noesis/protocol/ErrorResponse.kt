// automatically generated by the FlatBuffers compiler, do not modify

package noesis.protocol

import com.google.flatbuffers.kotlin.*
import kotlin.jvm.JvmInline
@Suppress("unused")
class ErrorResponse : Table() {

    fun init(i: Int, buffer: ReadWriteBuffer) : ErrorResponse = reset(i, buffer)

    val id : String? get() = lookupField(4, null ) { string(it + bufferPos) }
    fun idAsBuffer() : ReadBuffer = vectorAsBuffer(bb, 4, 1)

    val errorCode : UInt get() = lookupField(6, 0u ) { bb.getUInt(it + bufferPos) }

    val errorMessage : String? get() = lookupField(8, null ) { string(it + bufferPos) }
    fun errorMessageAsBuffer() : ReadBuffer = vectorAsBuffer(bb, 8, 1)

    val errorDetails : String? get() = lookupField(10, null ) { string(it + bufferPos) }
    fun errorDetailsAsBuffer() : ReadBuffer = vectorAsBuffer(bb, 10, 1)

    val stackTrace : String? get() = lookupField(12, null ) { string(it + bufferPos) }
    fun stackTraceAsBuffer() : ReadBuffer = vectorAsBuffer(bb, 12, 1)

    val nativeLayer : String? get() = lookupField(14, null ) { string(it + bufferPos) }
    fun nativeLayerAsBuffer() : ReadBuffer = vectorAsBuffer(bb, 14, 1)

    companion object {
        fun validateVersion() = VERSION_2_0_8

        fun asRoot(buffer: ReadWriteBuffer) : ErrorResponse = asRoot(buffer, ErrorResponse())
        fun asRoot(buffer: ReadWriteBuffer, obj: ErrorResponse) : ErrorResponse = obj.init(buffer.getInt(buffer.limit) + buffer.limit, buffer)


        fun createErrorResponse(builder: FlatBufferBuilder, idOffset: Offset<String>, errorCode: UInt, errorMessageOffset: Offset<String>, errorDetailsOffset: Offset<String>, stackTraceOffset: Offset<String>, nativeLayerOffset: Offset<String>) : Offset<ErrorResponse> {
            builder.startTable(6)
            addNativeLayer(builder, nativeLayerOffset)
            addStackTrace(builder, stackTraceOffset)
            addErrorDetails(builder, errorDetailsOffset)
            addErrorMessage(builder, errorMessageOffset)
            addErrorCode(builder, errorCode)
            addId(builder, idOffset)
            return endErrorResponse(builder)
        }
        fun startErrorResponse(builder: FlatBufferBuilder) = builder.startTable(6)

        fun addId(builder: FlatBufferBuilder, id: Offset<String>) = builder.add(0, id, 0)

        fun addErrorCode(builder: FlatBufferBuilder, errorCode: UInt) = builder.add(1, errorCode, 0u)

        fun addErrorMessage(builder: FlatBufferBuilder, errorMessage: Offset<String>) = builder.add(2, errorMessage, 0)

        fun addErrorDetails(builder: FlatBufferBuilder, errorDetails: Offset<String>) = builder.add(3, errorDetails, 0)

        fun addStackTrace(builder: FlatBufferBuilder, stackTrace: Offset<String>) = builder.add(4, stackTrace, 0)

        fun addNativeLayer(builder: FlatBufferBuilder, nativeLayer: Offset<String>) = builder.add(5, nativeLayer, 0)

        fun endErrorResponse(builder: FlatBufferBuilder) : Offset<ErrorResponse> {
            val o: Offset<ErrorResponse> = builder.endTable()
            return o
        }
    }
}

typealias ErrorResponseOffsetArray = OffsetArray<ErrorResponse>

inline fun ErrorResponseOffsetArray(size: Int, crossinline call: (Int) -> Offset<ErrorResponse>): ErrorResponseOffsetArray =
    ErrorResponseOffsetArray(IntArray(size) { call(it).value })
