// automatically generated by the FlatBuffers compiler, do not modify

package harmony.protocol

import com.google.flatbuffers.kotlin.*
import kotlin.jvm.JvmInline
@Suppress("unused")
class HarmonyRequest : Table() {

    fun init(i: Int, buffer: ReadWriteBuffer) : HarmonyRequest = reset(i, buffer)

    val id : String? get() = lookupField(4, null ) { string(it + bufferPos) }
    fun idAsBuffer() : ReadBuffer = vectorAsBuffer(bb, 4, 1)

    val encodeRequest : harmony.protocol.EncodeRequest? get() = encodeRequest(harmony.protocol.EncodeRequest())
    fun encodeRequest(obj: harmony.protocol.EncodeRequest) : harmony.protocol.EncodeRequest? = lookupField(6, null ) { obj.init(indirect(it + bufferPos), bb) }

    val decodeRequest : harmony.protocol.DecodeRequest? get() = decodeRequest(harmony.protocol.DecodeRequest())
    fun decodeRequest(obj: harmony.protocol.DecodeRequest) : harmony.protocol.DecodeRequest? = lookupField(8, null ) { obj.init(indirect(it + bufferPos), bb) }

    val promptRequest : harmony.protocol.PromptRequest? get() = promptRequest(harmony.protocol.PromptRequest())
    fun promptRequest(obj: harmony.protocol.PromptRequest) : harmony.protocol.PromptRequest? = lookupField(10, null ) { obj.init(indirect(it + bufferPos), bb) }

    val reasoningRequest : harmony.protocol.ReasoningRequest? get() = reasoningRequest(harmony.protocol.ReasoningRequest())
    fun reasoningRequest(obj: harmony.protocol.ReasoningRequest) : harmony.protocol.ReasoningRequest? = lookupField(12, null ) { obj.init(indirect(it + bufferPos), bb) }

    companion object {
        fun validateVersion() = VERSION_2_0_8

        fun asRoot(buffer: ReadWriteBuffer) : HarmonyRequest = asRoot(buffer, HarmonyRequest())
        fun asRoot(buffer: ReadWriteBuffer, obj: HarmonyRequest) : HarmonyRequest = obj.init(buffer.getInt(buffer.limit) + buffer.limit, buffer)


        fun createHarmonyRequest(builder: FlatBufferBuilder, idOffset: Offset<String>, encodeRequestOffset: Offset<harmony.protocol.EncodeRequest>, decodeRequestOffset: Offset<harmony.protocol.DecodeRequest>, promptRequestOffset: Offset<harmony.protocol.PromptRequest>, reasoningRequestOffset: Offset<harmony.protocol.ReasoningRequest>) : Offset<HarmonyRequest> {
            builder.startTable(5)
            addReasoningRequest(builder, reasoningRequestOffset)
            addPromptRequest(builder, promptRequestOffset)
            addDecodeRequest(builder, decodeRequestOffset)
            addEncodeRequest(builder, encodeRequestOffset)
            addId(builder, idOffset)
            return endHarmonyRequest(builder)
        }
        fun startHarmonyRequest(builder: FlatBufferBuilder) = builder.startTable(5)

        fun addId(builder: FlatBufferBuilder, id: Offset<String>) = builder.add(0, id, 0)

        fun addEncodeRequest(builder: FlatBufferBuilder, encodeRequest: Offset<harmony.protocol.EncodeRequest>) = builder.add(1, encodeRequest, 0)

        fun addDecodeRequest(builder: FlatBufferBuilder, decodeRequest: Offset<harmony.protocol.DecodeRequest>) = builder.add(2, decodeRequest, 0)

        fun addPromptRequest(builder: FlatBufferBuilder, promptRequest: Offset<harmony.protocol.PromptRequest>) = builder.add(3, promptRequest, 0)

        fun addReasoningRequest(builder: FlatBufferBuilder, reasoningRequest: Offset<harmony.protocol.ReasoningRequest>) = builder.add(4, reasoningRequest, 0)

        fun endHarmonyRequest(builder: FlatBufferBuilder) : Offset<HarmonyRequest> {
            val o: Offset<HarmonyRequest> = builder.endTable()
            return o
        }
    }
}

typealias HarmonyRequestOffsetArray = OffsetArray<HarmonyRequest>

inline fun HarmonyRequestOffsetArray(size: Int, crossinline call: (Int) -> Offset<HarmonyRequest>): HarmonyRequestOffsetArray =
    HarmonyRequestOffsetArray(IntArray(size) { call(it).value })
