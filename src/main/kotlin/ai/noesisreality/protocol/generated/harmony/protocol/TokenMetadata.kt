// automatically generated by the FlatBuffers compiler, do not modify

package harmony.protocol

import com.google.flatbuffers.kotlin.*
import kotlin.jvm.JvmInline
@Suppress("unused")
class TokenMetadata : Table() {

    fun init(i: Int, buffer: ReadWriteBuffer) : TokenMetadata = reset(i, buffer)

    val tokenId : UInt get() = lookupField(4, 0u ) { bb.getUInt(it + bufferPos) }

    val tokenText : String? get() = lookupField(6, null ) { string(it + bufferPos) }
    fun tokenTextAsBuffer() : ReadBuffer = vectorAsBuffer(bb, 6, 1)

    val tokenType : Byte get() = lookupField(8, 0 ) { bb.get(it + bufferPos) }

    val confidence : Float get() = lookupField(10, 0.0f ) { bb.getFloat(it + bufferPos) }

    val position : UInt get() = lookupField(12, 0u ) { bb.getUInt(it + bufferPos) }

    companion object {
        fun validateVersion() = VERSION_2_0_8

        fun asRoot(buffer: ReadWriteBuffer) : TokenMetadata = asRoot(buffer, TokenMetadata())
        fun asRoot(buffer: ReadWriteBuffer, obj: TokenMetadata) : TokenMetadata = obj.init(buffer.getInt(buffer.limit) + buffer.limit, buffer)


        fun createTokenMetadata(builder: FlatBufferBuilder, tokenId: UInt, tokenTextOffset: Offset<String>, tokenType: Byte, confidence: Float, position: UInt) : Offset<TokenMetadata> {
            builder.startTable(5)
            addPosition(builder, position)
            addConfidence(builder, confidence)
            addTokenText(builder, tokenTextOffset)
            addTokenId(builder, tokenId)
            addTokenType(builder, tokenType)
            return endTokenMetadata(builder)
        }
        fun startTokenMetadata(builder: FlatBufferBuilder) = builder.startTable(5)

        fun addTokenId(builder: FlatBufferBuilder, tokenId: UInt) = builder.add(0, tokenId, 0u)

        fun addTokenText(builder: FlatBufferBuilder, tokenText: Offset<String>) = builder.add(1, tokenText, 0)

        fun addTokenType(builder: FlatBufferBuilder, tokenType: Byte) = builder.add(2, tokenType, 0)

        fun addConfidence(builder: FlatBufferBuilder, confidence: Float) = builder.add(3, confidence, 0.0f)

        fun addPosition(builder: FlatBufferBuilder, position: UInt) = builder.add(4, position, 0u)

        fun endTokenMetadata(builder: FlatBufferBuilder) : Offset<TokenMetadata> {
            val o: Offset<TokenMetadata> = builder.endTable()
            return o
        }
    }
}

typealias TokenMetadataOffsetArray = OffsetArray<TokenMetadata>

inline fun TokenMetadataOffsetArray(size: Int, crossinline call: (Int) -> Offset<TokenMetadata>): TokenMetadataOffsetArray =
    TokenMetadataOffsetArray(IntArray(size) { call(it).value })
